clc;clear all;sps = 35;space =35e9;baud_rate = 32e9;data_len = 2^17;param.span=6;param.sps = sps;param.roll_off = 0.05;param.default=true;span = Span(param);pram.Gain = 24;pram.Nf = 5;pram.Mode = 'heihei';pram.Wavelength = 1550e-9;edfa= Edfa(pram);wav = Wave(param);for i = 1:15   sig(i) = Signal(baud_rate,sps,"dp-qpsk",data_len,true);endfor i = 1:15    i    wav.prop(sig(i));endfor power = 0:0    power    for i = 1:15        sig(i).set_signal_power(1,'dbm')    end        wdm_wave = combine_sig(sig,space,193.1e12);%     %     save('wdm.mat','wdm_wave');        ce = sig(8);%     save('center_wav.mat','ce');%     Wave.spec(wdm_wave);%     Wave.spec(ce);%     wave_center = load('center_wav.mat');    % wave_center = wave_center.sig    % wave_center = wave_center(8);%     wave_center = wave_center.ce;    wave_center = ce;%     wdm_wave = load('wdm.mat');%     wdm_wave = wdm_wave.wdm_wave;    % wdm_wave.set_signal_power(2,'dbm');    num =1;    while true                        fprintf('\n\tspan number is %d', num)        span.prop(wdm_wave);        edfa.prop(wdm_wave);                                        wdm_wave.data_sample(1,:) = CD_Compensation(wdm_wave.data_sample(1,:),wdm_wave.T,span.length,span.beta2);        wdm_wave.data_sample(2,:) = CD_Compensation(wdm_wave.data_sample(2,:),wdm_wave.T,span.length,span.beta2);                        num=num+1;%         if num >=10 && num <=70                                    [center_channle_x,center_channel_y] = decombine(wdm_wave,32e9,0.05);                        center_channle = [center_channle_x;center_channel_y] ;            center_signal = Signal(baud_rate,sps,"dp-qpsk",data_len,false);            center_signal.data_sample = center_channle;            %match filter            wav.matched_filter(center_signal);                        %         center_signal.down_sample(sps/2);                        %             center_signal.down_sample(2);            %            %               center_signal.set_signal_power(2,'w');%every-pol power is 1w            %            %            recv_sym = center_signal.data_sample;            % function rxSymbolsOut = LMS_PLL(rxSignalIn, txSymbols, cnstl, varargin)            recv_sym = recv_sym.*sqrt(2/sum(mean(abs(recv_sym).^2,2)));            lms_alg = lms(0.001);            equ = lineareq(37,lms_alg);            equ.sigConst= center_signal.costl;            equ.nSampPerSym = sps;            recv_sym2(1,:) = equalize(equ,recv_sym(1,:),wave_center.data(1,:));            recv_sym2(2,:) = equalize(equ,recv_sym(2,:),wave_center.data(2,:));            %         recv_sym = LMS_PLL(center_signal.data_sample,wave_center.data,center_signal.costl);            %         recv_sym = recv_sym.*sqrt(2/sum(mean(abs(recv_sym).^2,2)));            x_recv = recv_sym2(1,:);            y_recv = recv_sym2(2,:);                        % s is signal            % p            % m            % k vertibi alg average            % applyunwrap bool value            % theta = vitvit([x_recv;y_recv],4,4,10,false);            %            % x_recv = x_recv.*exp(-1j*theta(1,:)+1j*pi/4);            % y_recv = y_recv.*exp(-1j*theta(2,:)+1j*pi/4);            % x_recv = VV_Carrier_Recovery(x_recv,20);            % y_recv = VV_Carrier_Recovery(y_recv,20);            x_recv = Synchronization(x_recv,wave_center.data(1,:));            y_recv = Synchronization(y_recv,wave_center.data(2,:));                        x_msg = qamdemod(x_recv,4);            err_rate = 0;            for i = 1:length(x_recv)                                if x_msg(i) ~= wave_center.msg(1,i)                    err_rate = err_rate+1;                                    end            end            err = err_rate/length(wave_center.msg);            if err_rate/length(wave_center.msg) >1.7e-3%                 max_si(power+10+1)=num;                break;            end            fprintf('err %f is:',err_rate/length(wave_center.msg));        end        %     endend